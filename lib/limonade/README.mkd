# Limonade: README

Limonade is a PHP micro framework for rapid web development and prototyping.

It's inspired by frameworks like [Sinatra](http://www.sinatrarb.com/) or [Camping](http://github.com/why/camping/tree/master) in Ruby, or [Orbit](http://orbit.luaforge.net/) in Lua. It aims to be simple, lightweight and extremly flexible.

Limonade provides functions that complete the PHP basic set, while keeping consistency with native functions and sitting up on them.

Limonade is easy to learn and provides everything that you can expect from a modern framework (MVC, REST, ...)

    require_once 'lib/limonade.php';
    dispatch('/', 'hello');
        function hello()
        {
            return 'Hello world!';
        }
    run();

## About this document ##

This document documents the changes which I've added to my clone of Limonade.

For more information regarding Limonade, you can see the [website](http://limonade.sofa-design.net/), 
[public API documentation](http://limonade.sofa-design.net/api/), [examples](http://limonade.sofa-design.net/examples.htm), and of course the [source code](http://github.com/sofadesign/limonade/blob/master/lib/limonade.php) which is still the best documentation.

A [discussion group](http://groups.google.com/group/limonade) is also available for more exchanges.
    
## Routes ##

I think my changes make Limonade more intuitive and useful, so I'm hoping they'll be incorporated into the main branch. They are as follows:

*   Params can be defined as normal PHP function arguments, since the run() method now performs a call_user_func_array() with the params collected. ATM it uses the array_values of the Limonade params collection - the possibility exists to use Reflection classes to assign the values by name instead of position. Obv, your param definitions in the pattern must be in the same order as the argument definition in PHP.

    ### Example ###

    Incoming URL:
        
        /holiday/id/21
        
    with route definition:
        
        dispatch('/holiday/id/:id', 'holidayById');
        
    results in function call:
        
        holidayById(21)

    Your controller/function definition is as follows:

        function holidayById($id) {
          ...
        }

    You can put in default arguments if you wish, if not supplied from the URL. Obv they must be at the end as in PHP.

    The params function still exists and can be used as before. The above change should be totally transparent to users of the master Limonade branch.

*   Add a $params parameter to the end of dispatch() and dispatch_*()

    ### Example ###

    Given a controller/function definition:

        function people($gender = null) {
          ...
        }

    the following route definitions are now possible:

        dispatch('/females', 'people', array('gender' => 'female'))
        dispatch('/males', 'people', array('gender' => 'male'))
        dispatch('/people', 'people')

    When Limonade runs the route, it uses the params defined in the function call first, and then applies the params it finds in the URL over that.
    
    I'm not certain that this is the best way to do it. It might be better to keep those parameters separate from the ones being passed in via the URL. I'll use it a bit more and see what works best.

These two changes allow you to wire up parameters directly from your URL to your function calls using native argument passing, giving you a back-channel to input parameters to your functions as defaults to be overriden from the URL or as bona-fide arguments to be used in your controller functions.

## Rewritten URLs and the lost QUERY_STRING

Removing the GET variables from the URL loses too much information,
and forces me to work in an uncomfortable style. If my page expects 10
get parameters, the URL is going to look awful.

The problem stems from the mod_rewrite method used in the original Limonade.

This method:

    RewriteRule ^(.*)$ index.php/?$1 [NC,L]

replaces the querystring completely with the requested URL. Also, the
NC is not necessary, since your pattern includes no letters, and will
match upper and lower case regardless.

This method works a lot better, but requires a change to the
request_uri() method in Limonade.

    RewriteRule ^.*$ index.php [L]

Because the querystring is not changed by the rule, all querystring
parameters are passed through verbatim.

mod_rewrite kindly sets 2 environment vars when rewriting a URL:
REDIRECT_URL and REDIRECT_QUERY_STRING.

We are only interested in REDIRECT_URL, to match against the route
definition. This environment variable contains the original requested URL, minus the
QUERY_STRING, which is exactly what we need for matching the routes. 

This specific change should not be put into the general release, until its effect on
the tests is tested, as it does change the way the dispatching and routing works, and
requires a change to the .htaccess described on the Limonade README page.

## More ##

* [Limonade web site](http://limonade.sofa-design.net/)
* [Issue tracking / release planning](http://sofadesign.lighthouseapp.com/projects/29612-limonade/overview)
* [Support / Discussions](http://groups.google.fr/group/limonade)
